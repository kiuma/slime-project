Slime-project creates the skeleton of a Common Lisp project by
automatically creating several files:

  * README.txt

  * <project>.asd

  * package.lisp (which defines a package named after the project)

  * <project>.lisp

For example, to create a new project called "sample1":

  (slime-project:make-project #p"src/sample1/" 
                              :depends-on '(cl-ppcre drakma closure-html))

The function interprets the last component of the pathname's directory
as the project name. You can override this interpretation by passing
an explicit :name argument. It then creates:

  * src/sample1/README

  * src/sample1/LICENSE

  * src/sample1/sample1.asd

  * src/sample1/package.lisp

  * src/sample1/sample.lisp

Slime-project has the capability to interact with emacs, to enable interaction just call
  (setf slime-project:*update-emacs-p* t)

If you don't like speedbar (that is handled when emacs interaction is active), call
  (setf slime-project:*disable-speedbar-p* t)

Slime-project also allows user interaction during project creation just call
  (slime-project:make-project #p"src/sample1/" 
                              :interactive-p t)
When interactive-p keyword is enabled, only name keyword is considered.

Slime-project is also capable of updating a system creating necessary missing resources calling
  (slime-project:update-system :sample1)

You can even launch the update-system function in interactive mode calling
  (slime-project:update-system :sample1 t)
then you'll be able to choose the package for the in-packace directive for every newly created 
resource.

Slime-project is licensed under the MIT license; see LICENSE.txt for
details.
